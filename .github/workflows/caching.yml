name: CI with Dependency Caching

# Trigger on push, pull request, and manual dispatch
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-with-cache:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js (creates package dependencies to cache)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Create package.json if it doesn't exist (for demo purposes)
      - name: Create demo package.json
        run: |
          if [ ! -f "package.json" ]; then
            cat > package.json << 'EOF'
          {
            "name": "data-science-portfolio",
            "version": "1.0.0",
            "description": "Data Science Portfolio with CI/CD",
            "dependencies": {
              "lodash": "^4.17.21",
              "axios": "^1.6.0",
              "express": "^4.18.2",
              "moment": "^2.29.4"
            },
            "devDependencies": {
              "jest": "^29.7.0",
              "eslint": "^8.55.0"
            },
            "scripts": {
              "test": "echo 'Tests passed!'",
              "build": "echo 'Build completed!'"
            }
          }
          EOF
            echo "✅ Demo package.json created"
          fi

      # Cache dependencies with the specified key
      - name: Cache Node.js dependencies  
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: cache-71f84a5-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            cache-71f84a5-${{ runner.os }}-node-

      # Step with specified name that checks cache hit/miss result
      - name: prime-cache-71f84a5
        run: |
          echo "=== Cache Status Report ==="
          if [ "${{ steps.cache-deps.outputs.cache-hit }}" = "true" ]; then
            echo "✅ CACHE HIT: Dependencies restored from cache"
            echo "Cache Key: cache-71f84a5-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}"
            echo "This run will be faster due to cached dependencies!"
          else
            echo "❌ CACHE MISS: No cache found, will install fresh dependencies"
            echo "Cache Key: cache-71f84a5-${{ runner.os }}-node-${{ hashFiles('**/package-lock.json', '**/package.json') }}"
            echo "Next run will be faster once cache is populated!"
          fi
          echo "Cache Hit Result: ${{ steps.cache-deps.outputs.cache-hit }}"
          echo "Runner OS: ${{ runner.os }}"
          echo "=== End Cache Report ==="

      # Install dependencies (only if cache miss)
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          echo "Installing Node.js dependencies..."
          npm ci --prefer-offline --no-audit
          echo "✅ Dependencies installed successfully"

      # Additional cache for Python dependencies (demonstrating multiple caches)
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Create requirements.txt for Python caching demo
      - name: Create demo requirements.txt
        run: |
          cat > requirements.txt << 'EOF'
          pandas==2.1.3
          numpy==1.25.2
          scikit-learn==1.3.2
          matplotlib==3.8.2
          requests==2.31.0
          EOF
          echo "✅ Demo requirements.txt created"

      # Cache Python dependencies
      - name: Cache Python dependencies
        id: cache-python
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: cache-71f84a5-python-${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            cache-71f84a5-python-${{ runner.os }}-pip-

      # Install Python dependencies (only if cache miss)
      - name: Install Python dependencies  
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          echo "Installing Python dependencies..."
          pip install -r requirements.txt
          echo "✅ Python dependencies installed"

      # Run tests to demonstrate the cached environment works
      - name: Run tests with cached dependencies
        run: |
          echo "=== Running Tests with Cached Environment ==="
          
          # Test Node.js dependencies
          echo "Testing Node.js setup..."
          node -e "console.log('Node.js version:', process.version)"
          npm --version
          
          # Test Python dependencies  
          echo "Testing Python setup..."
          python -c "
          import pandas as pd
          import numpy as np
          import sklearn
          print('✅ Python dependencies working')
          print(f'Pandas: {pd.__version__}')
          print(f'NumPy: {np.__version__}')
          print(f'Scikit-learn: {sklearn.__version__}')
          "
          
          # Run project tests
          npm test
          echo "✅ All tests passed!"

      # Build project (demonstrating cached dependencies speed up build)
      - name: Build project
        run: |
          echo "=== Building Project ==="
          npm run build
          
          # Generate build report
          echo "# Build Report" > build-report.md
          echo "- Build completed at: $(date)" >> build-report.md
          echo "- Node.js cache hit: ${{ steps.cache-deps.outputs.cache-hit }}" >> build-report.md  
          echo "- Python cache hit: ${{ steps.cache-python.outputs.cache-hit }}" >> build-report.md
          echo "- Total build time saved with caching!" >> build-report.md
          
          cat build-report.md

      # Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-report-cache-71f84a5
          path: build-report.md
